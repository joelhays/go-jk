<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>JediKnight Unofficial Specs</title>
<!-- generated by StealthJedi`s Autolink  -->
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000EE"
vlink="#551A8B" alink="#FF0000">

<h1>Cog Files</h1>

<hr width="70%">

<p><a name="default"></a> <font size="4"><strong>System Reference</strong></font>
</p>

<p>Verbs dealing with some system things. </p>

<table border="3" cellpadding="5" bgcolor="#C0C0C0">
    <tr>
        <td><pre>
<a href="#jkEndLevel">jkEndLevel</a>
<a href="#jkGetSaberCam">jkGetSaberCam</a>
<a href="#AutoSaveGame">AutoSaveGame</a>
<a href="#BitClear">BitClear</a>
<a href="#BitSet">BitSet</a>
<a href="#BitTest">BitTest</a>
<a href="#ClearDebugModeFlags">ClearDebugModeFlags</a>
<a href="#ClearGoalFlags">ClearGoalFlags</a>
<a href="#ClearSubModeFlags">ClearSubModeFlags</a>
<a href="#GetAutoPickup">GetAutoPickup</a>
<a href="#GetAutoReload">GetAutoReload</a>
<a href="#GetAutoSwitch">GetAutoSwitch</a>
<a href="#GetDebugModeFlags">GetDebugModeFlags</a>
<a href="#GetDifficulty">GetDifficulty</a>
<a href="#GetFlexGameTime">GetFlexGameTime</a>
<a href="#GetGameTime">GetGameTime</a>
<a href="#GetGoalFlags">GetGoalFlags</a>
<a href="#GetLevelTime">GetLevelTime</a>
<a href="#GetMajorMode">GetMajorMode</a>
<a href="#GetMasterCog">GetMasterCog</a>
<a href="#GetParam">GetParam</a>
<a href="#GetSelfCog">GetSelfCog</a>
<a href="#GetSenderId">GetSenderId</a>
<a href="#GetSenderRef">GetSenderRef</a>
<a href="#GetSenderType">GetSenderType</a>
<a href="#GetSithMode">GetSithMode</a>
<a href="#GetSourceRef">GetSourceRef</a>
<a href="#GetSourceType">GetSourceType</a>
<a href="#GetSubModeFlags">GetSubModeFlags</a>
<a href="#HeapFree">HeapFree</a>
<a href="#HeapGet">HeapGet</a>
<a href="#HeapNew">HeapNew</a>
<a href="#HeapSet">HeapSet</a>
<a href="#KillTimerEx">KillTimerEx</a>
<a href="#ParseArg">ParseArg</a>
<a href="#Rand">Rand</a>
<a href="#Reset">Reset</a>
<a href="#ReturnEx">ReturnEx</a>
<a href="#SendMessage">SendMessage</a>
<a href="#SendMessageEx">SendMessageEx</a>
<a href="#SendTrigger">SendTrigger</a>
<a href="#SetAutoPickup">SetAutoPickup</a>
<a href="#SetAutoReload">SetAutoReload</a>
<a href="#SetAutoSwitch">SetAutoSwitch</a>
<a href="#SetDebugModeFlags">SetDebugModeFlags</a>
<a href="#SetGoalFlags">SetGoalFlags</a>
<a href="#SetMasterCog">SetMasterCog</a>
<a href="#SetParam">SetParam</a>
<a href="#SetPulse">SetPulse</a>
<a href="#SetSubModeFlags">SetSubModeFlags</a>
<a href="#SetTimer">SetTimer</a>
<a href="#SetTimerex">SetTimerex</a>
<a href="#SkillTarget">SkillTarget</a>
<a href="#Sleep">Sleep</a>
<a href="#Takeitem">Takeitem</a>
</pre>
        </td>
    </tr>
</table>

<hr align="left" width="200">

<p><a name="jkEndLevel"></a> <b>jkEndLevel()</b> Control </p>

<p>Ends the level. </p>

<p> Use: jkEndLevel(0 | 1); terminates the level indicating failure or success in the mission </p>

<hr align="left" width="200">

<p><a name="jkGetSaberCam"></a> <b>jkGetSaberCam()</b> Info </p>

<p>Gets the setting of auto saber camera option in the graphic interface. </p>

<p>Use: set = jkGetSaberCam(); returns 1 if set,0 if not set </p>

<hr align="left" width="200">

<p><a name="AutoSaveGame"></a> <b>AutoSaveGame()</b> Control </p>

<p>Autosaves the game </p>

<p>Use: AutoSaveGame(); </p>

<hr align="left" width="200">

<p><a name="BitClear"></a> <b>BitClear()</b> </p>

<p>Clears a bit within a bit array (flag value).</p>

<p>BitClear(Flag_value, Flag_to_clear); </p>

<hr align="left" width="200">

<p><a name="BitSet"></a> <b>BitSet()</b> </p>

<p>Sets a bit within a bit array (flag value).<BR> 
In other words, it adds a flag to an exisitng array of them. </p>

<p>BitSet(Flag_value, Flag_to_add); <BR>

 </p>

<hr align="left" width="200">

<p><a name="BitTest"></a> <b>BitTest()</b> </p>

<p>Tests two values against each other for equality. </p>

<p>Use: BitTest(flag_a, flag_b);<BR>
   Example of use: If(BitTest(16, type)) <BR>
	The code would continue if type equaled 16.
 </p>

<hr align="left" width="200">

<p><a name="ClearDebugModeFlags"></a> <b>ClearDebugModeFlags()</b>
</p>

<p>? </p>

<p>? Not Used </p>

<hr align="left" width="200">

<p><a name="ClearGoalFlags"></a> <b>ClearGoalFlags()</b> </p>

<p>Clear one or more goal flags for one of the goals. Used for
single player objectives</p>

<p>Use: ClearGoalFlags(player, goalNumber, flagsToClear);
goalNumber starts at zero.<br>
The first goal (i.e. goal 0) description corresponds to the cogString whose value is in bin 99.<BR>
flagsToClear are the Goal Flags. <A HREF="cog_flags.htm#goal_flags"> See Goal Flags</A></p>

<hr align="left" width="200">

<p><a name="ClearSubModeFlags"></a> <b>ClearSubModeFlags()</b> </p>

<p>? </p>

<p>? Not used </p>

<hr align="left" width="200">

<p><a name="GetAutoPickup"></a> <b>GetAutoPickup()</b> </p>

<p>Gets the status of the auto pickup setting in the graphic interface
.</p>

<p>Use: Value = GetAutoPickup();</p>

<hr align="left" width="200">

<p><a name="GetAutoReload"></a> <b>GetAutoReload()</b> </p>

<p>Gets the status of the autoreload setting in the graphic interface
 </p>

<p>Use: GetAutoReload();</p>

<hr align="left" width="200">

<p><a name="GetAutoSwitch"></a> <b>GetAutoSwitch()</b> </p>

<p>Gets the status of the auto switch setting in the graphic
interface </p>

<p>Use: GetAutoSwitch();</p>

<hr align="left" width="200">

<p><a name="GetDebugModeFlags"></a> <b>GetDebugModeFlags()</b> </p>

<p>? </p>

<p>? Not used </p>

<hr align="left" width="200">

<p><a name="GetDifficulty"></a> <b>GetDifficulty()</b> </p>

<p>Gets difficulty setting for SP.<BR>
0 = easy <BR>
1 = medium<BR>
2 = hard</p>

<p>Use: GetDifficulty()</p>

<hr align="left" width="200">

<p><a name="GetFlexGameTime"></a> <b>GetFlexGameTime()</b> </p>

<p>? </p>

<p>? Not Used in JK</p>

<hr align="left" width="200">

<p><a name="GetGameTime"></a> <b>GetGameTime()</b> </p>

<p>?</p>

<p>? Not Used in JK</p>

<hr align="left" width="200">

<p><a name="GetGoalFlags"></a> <b>GetGoalFlags()</b> </p>

<p> Returns the Goal Flags of the selected goal. Used for single player objectives</p>

<p>Use: GetGoalFlags(player, goalNumber);
goalNumber starts at zero.<br>
The first goal (i.e. goal 0) description corresponds to the cogString whose value is in bin 99.<BR>
This verb returns the Goal Flags of the selected goal. <A HREF="cog_flags.htm#goal_flags"> See Goal Flags</A></p>

<hr align="left" width="200">


<p><a name="GetLevelTime"></a> <b>GetLevelTime()</b> </p>

<p>?</p>

<p>?</p>

<hr align="left" width="200">


<p><a name="GetMajorMode"></a> <b>GetMajorMode()</b> </p>

<p>?</p>

<p>?</p>

<hr align="left" width="200">


<p><a name="GetMasterCog"></a> <b>GetMasterCog()</b> </p>

<p>Returns the cogRef of the current Master cog.</p>

<p>Use: GetMasterCog()<BR>
This value can then be passed to cog verbs expecting a cog reference (like <a href="#SendMessage">SendMessage</a> for instance).
</p>

<hr align="left" width="200">


<p><a name="GetParam"></a> <b>GetParam()</b> </p>

<p>Gets one parameter of a cog message.
Each cog message has 4 parameters, but generally only some of them contain useful values.</p>

<p>Use: GetParam(paramNumber);<BR>
Where paramNumber can be 0, 1, 2 or 3.</p>

<p>Examples of verbs setting parameters are <a href="#SendMessageEx">SendMessageEx</a>, <a href="#SetTimerEx">SetTimerEx</a>, <a href="#SetParam">SetParam</a>, ... <BR>
Note that the engine itself sometimes set parameters when calling a message handler. <BR>
For instance in the damaged: message param0 is the amount of damage, and param1 is the type of damage.
<A HREF="cog_flags.htm#damage_flags"> See Damage Flags</A></p>

<hr align="left" width="200">



<p><a name="GetSelfCog"></a> <b>GetSelfCog()</b> </p>

<p>Returns the cogRef of the current cog.</p>

<p>Use: GetSelfCog()<BR>
This value can then be passed to cog verbs expecting a cog reference (like <a href="#SendMessage">SendMessage</a>, <a href="#SendMessageEx">SendMessageEx</a>, or <a href="#SetMasterCog">SetMasterCog</a> for instance).
</p>

<hr align="left" width="200">



<p><a name="GetSenderId"></a> <b>GetSenderId()</b> </p>

<p>Returns the ID of the current message's sender.<BR>
The ID can be set in various ways: via a cog verb like <a href="#SetTimerEx">SetTimerEx</a> or <a href="#SetTrigger">SendTrigger</a>,
but also via the linkid= setting in the symbols section of a cog. <A HREF="cog_sym_ex.htm#c_ex_symboluse"> SEE Symbol Uses</A>
</p>

<p>Use : GetSenderId()</p>

<hr align="left" width="200">


<p><a name="GetSenderRef"></a> <b>GetSenderRef()</b> </p>

<p>Returns what sent a message to the cog.<BR>
This is the direct originator of the message, for instance a surface that is being activated:, or an actor that is being damaged:<BR>
The Sender should not be confused with the Source (see <a href="#GetSourceRef">GetSourceRef</a>)
</p>

<p>Use: GetSenderRef()</p>

<hr align="left" width="200">


<p><a name="GetSenderType"></a> <b>GetSenderType()</b> </p>

<p>Gets the type of the sender of the message. <BR>
I.e. you get a reference to the sender, but what type of object is it ?<BR>
Thing = 3<BR>
Sector = 5<BR>
Surface = 6
</p>

<p>Use: GetSenderType()</p>

<hr align="left" width="200">


<p><a name="GetSithMode"></a> <b>GetSithMode()</b> </p>

<p>? </p>

<p>? Not Used in JK</p>

<hr align="left" width="200">


<p><a name="GetSourceRef"></a> <b>GetSourceRef()</b> </p>

<p>Returns what caused a message to be sent to the cog.<BR>
This is the indirect originator of the message, for instance the player activating a surface, or that is damaging an actor.<BR>
The Source should not be confused with the Sender (see <a href="#GetSenderRef">GetSenderRef</a>)
</p>

<p>Use: GetSourceRef()</p>

<hr align="left" width="200">


<p><a name="GetSourceType"></a> <b>GetSourceType()</b> </p>

<p>Gets the type of the source of the message. <BR>
I.e. you get a reference to the source, but what type of object is it ?<BR>
Thing = 3<BR>
Sector = 5<BR>
Surface = 6
</p>

<p>Use: GetSourceType()</p>

<hr align="left" width="200">

<p><a name="GetSubModeFlags"></a> <b>GetSubModeFlags()</b> </p>

<p>? </p>

<p>? Not Used in JK</p>

<hr align="left" width="200">

<p><a name="HeapFree"></a> <b>HeapFree()</b> </p>

<p>Frees the allocated heap array for a certain cog. <BR><P>
 </p>

<p>HeapFree();</p>

Note: The heap verbs allocate memory to a system, making it possible to accomplish complex tasks via cog.
<BR>The heap verbs may not be retained in singleplayer saved game files.
</P>
<hr align="left" width="200">

<p><a name="HeapGet"></a> <b>HeapGet()</b> </p>

<p>Returns the allocation of a heap. </p>

<p>int = HeapGet(int_heap);</p>

<hr align="left" width="200">

<p><a name="HeapNew"></a> <b>HeapNew()</b> </p>

<p>Allocates memory elements of any size (the largest size being a vector) to a cog. </p>

<p>HeapSet(Int_Size);</p>

<hr align="left" width="200">

<p><a name="HeapSet"></a> <b>HeapSet()</b> </p>

<p>Sets a heap size to a certain heap. </p>

<p>HeapSet(int_heap, int_value);</p>

<hr align="left" width="200">


<p><a name="KillTimerEx"></a> <b>KillTimerEx()</b> </p>

<p>Kills any extended timer with the specified ID.<BR>
See <a href="#SetTimerEx">SetTimerEx</a></p>

<p>Use: KillTimerEx(timerID);</p>

<hr align="left" width="200">


<p><a name="ParseArg"></a> <b>ParseArg()</b> </p>

<p>Can be used to set a thing's template dynamically. </p>

<p>Use: ParseArg(ThingRef, "template value");<BR> 
Template values can be anything found in a template ie: "movesize=3.4", "collide=0", etc...
<BR>
<B>Note:</B> The testing of the function showed that it is very erratic and many template changes could <B>not</b> be changed dynamically.
</p>

<hr align="left" width="200">


<p><a name="Rand"></a> <b>Rand()</b> </p>

<p>Returns a random flex value between 0.0 and 1.0</p>

<p>Use: Rand()</p>

<hr align="left" width="200">


<p><a name="Reset"></a> <b>Reset()</b> </p>

<p>Resets any existing CALL, WAIT, or WAITFORSTOP contexts.  Used to completely reset the state of the COG in the event of an interrupt message.
 </p>

<p>Use: Reset();</p>

<hr align="left" width="200">


<p><a name="ReturnEx"></a> <b>ReturnEx()</b> </p>

<p>Specifies the flex value that the cog message returns to the caller.<BR>
Remember the caller can be cog (via <a href="#SendMessageEx">SendMessageEx</a> for instance) or the engine itself (using ReturnEx(0) in a damaged: handler will negate the damage for instance). </p>

<p>Use: ReturnEx(flex returnValue);</p>

<hr align="left" width="200">


<p><a name="SendMessage"></a> <b>SendMessage()</b> </p>

<p>Sends a message to a cog.</p>

<p>Use: SendMessage(cogRef, message);
<A HREF="cog_message.htm#c_message"> SEE Cog Messages</A></p>

<hr align="left" width="200">


<p><a name="SendMessageEx"></a> <b>SendMessageEx()</b> </p>

<p>Sends a message to a cog with parameters passing.<BR>
This verb returns a value that it what the callee set in a <a href="#ReturnEx">ReturnEx</a> statement.</p>

<p>Use: SendMessageEx(cogRef, message, flex param0, flex param1, flex param2, flex param3);
</p>

<hr align="left" width="200">


<p><a name="SendTrigger"></a> <b>SendTrigger()</b> </p>

<p>Sends a trigger, that is generates a trigger: message sent to all the cogs on the destination.<BR>
The destination can be either a player (local or remote on the network) reference or -1. If it is -1 the message is broadcast to ALL the connected players.<BR>
This verb can be used to reduce bandwidth in multiplayer games, as well as to transmit information that is not normally synched over the network.<BR>
The receiving cogs are responsible to declare and code a handler for the trigger: message. And they can check that they want to handle a specific triggerID by using
<a href="#GetSenderID">GetSenderID</a> as well as retrieve the parameters passed with <a href="#GetParam">GetParam</a>.
</p>

<p>Use: SendTrigger(destination, triggerID, flex param0, flex param1, flex param2, flex param3);
</p>

<hr align="left" width="200">


<p><a name="SetAutoPickup"></a> <b>SetAutoPickup()</b> </p>

<p>Sets the status of the auto pickup setting in the graphic interface </p>

<p>SetAutoPickup(0 | 1);</p>


<hr align="left" width="200">

<p><a name="SetAutoReload"></a> <b>SetAutoReload()</b> </p>

<p>Sets the status of the auto reload setting in the graphic interface </p>

<p>SetAutoReload(0 | 1);</p>

<hr align="left" width="200">


<p><a name="SetAutoSwitch"></a> <b>SetAutoSwitch()</b> </p>

<p>Sets the status of the auto switch setting in the graphic interface </p>

<p>SetAutoSwitch(0 | 1);</p>

<hr align="left" width="200">


<p><a name="SetDebugModeFlags"></a> <b>SetDebugModeFlags()</b> </p>

<p>? </p>

<p>? not used </p>

<hr align="left" width="200">


<p><a name="SetGoalFlags"></a> <b>SetGoalFlags()</b> </p>

<p>Sets a goal flag for one of the goals. Used for
single player objectives</p>

<p>Use: SetGoalFlags(player, goalNumber, flagsToSet);
goalNumber starts at zero.<br>
The first goal (i.e. goal 0) description corresponds to the cogString whose value is in bin 99.<BR>
flagsToSet are the Goal Flags. <A HREF="cog_flags.htm#goal_flags">See Goal Flags</A> </p>

<hr align="left" width="200">


<p><a name="SetMasterCog"></a> <b>SetMasterCog()</b> </p>

<p>Sets the Master cog for a single player level.<BR>
Usually used for endlevel cogs of single player levels, the MasterCog is actually an easy way to access a cog reference from another cog without having to link the cog.
</p>

<p>Use: SetMasterCOG(cogRef);<BR>
cogRef is often passed as <a href="#GetSelfCog">GetSelfCog</a>, the current cog.
</p>

<hr align="left" width="200">


<p><a name="SetParam"></a> <b>SetParam()</b> </p>

<p>Sets one parameter of a cog message.
Each cog message has 4 parameters, but generally only some of them contain useful values.<BR>
This function was probably only added for completeness.
</p>

<p>Use: SetParam(paramNumber, flex value);<BR>
Where paramNumber can be 0, 1, 2 or 3.</p>


<hr align="left" width="200">

<p><a name="SetPulse"></a> <b>SetPulse()</b> </p>

<p>Sets the pulse for the current cog's. <BR>
This will generate a pulse: message every interval.</p>

<p>Use: SetPulse(flex interval);<BR>
Use SetPulse(0); to stop the pulse.</p>

<hr align="left" width="200">


<p><a name="SetSubModeFlags"></a> <b>SetSubModeFlags()</b> </p>

<p>Sets the Sith Sub Mode. </p>

<p>SetSubModeFlags(flag);<BR>
<A HREF="cog_flags.htm#submode_flags"> See SubMode Flags</A>
</p>

<hr align="left" width="200">


<p><a name="SetTimer"></a> <b>SetTimer()</b> </p>

<p>Sets the timer for the cog, that will result in a timer: message being sent to the cog when delay seconds elapse.</p>

<p>Use: SetTimer(delay);</p>

<hr align="left" width="200">


<p><a name="SetTimerex"></a> <b>SetTimerex()</b> </p>

<p>Sets an timer of delay seconds for the cog, allowing to use multiple timers with IDs and pass parameters to them.</p>

<p>Use: SetTimerEx(delay, timerID, flex param0, flex param1);<BR>
In the timer: handler you can check what the ID is with <a href="#GetSenderID">GetSenderID</a> as well as retrieve the parameters passed with <a href="#GetParam">GetParam</a>.<BR>
Note that it is allowed to have multiple timers with the same ID waiting to be sent to the cog, each will keep its own parameters.
</p>


<hr align="left" width="200">


<p><a name="SkillTarget"></a> <b>SkillTarget()</b> </p>

<p>Tells a target that a certain skill is being applied to it. <BR>
Mainly used for force powers, this is akin to a SendMessageEx that would reach accross the network.</p>

<p>Use: returnValue = SkillTarget(victim, player, binNumber, rank); <BR>
Note that when SkillTarget is sent over the network the return value is undefined, the cog DOES NOT wait for an answer
(which is very logical, you don't want to wait for a double lag before continuing the execution). So in multiplayer the
return value is not used to specify immunities and such as in single player.
</p>

<hr align="left" width="200">


<p><a name="Sleep"></a> <b>Sleep()</b> </p>

<p>Pauses the cog and its actions for a defined time.</p>

<p>Use: Sleep(sleeptime); <BR>
Note that this verb is very dangerous to use in cogs that could be reentered...
</p>

<hr align="left" width="200">


<p><a name="Takeitem"></a> <b>TakeItem()</b> </p>

<p>Requests to take an item from the server. If the server agrees the taken: message is sent to the cog.<BR>
This does not occur in MOTS (except for backpacks) to reduce lag at the expense of risking a little inconsistency
(i.e. two players taking the same powerup at the "same time").</p>

<p>Use: TakeItem(item, player);</p>

<p><br>
</p>

<hr>
</body>
</html>
